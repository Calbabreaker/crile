use crate::{Vector2, Vector2U};

// Create our own key code and mouse button enum instead of using winit so we can manage it ourselves.
// Winit can change anytime + Want to rename some properties.
// That means we have to create conversion functions though.
#[derive(Debug, Hash, PartialOrd, Ord, PartialEq, Eq, Clone, Copy)]
pub enum KeyCode {
    // Number keys over the letters
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    Key0,

    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,

    Escape,

    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,

    PrintScreen,
    ScrollLock,
    Pause,

    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,

    LeftArrow,
    UpArrow,
    RightArrow,
    DownArrow,

    Backspace,
    Return,
    Space,

    /// The "Compose" key on Linux.
    Compose,

    Caret,

    Numlock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadDivide,
    NumpadDecimal,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    NumpadMultiply,
    NumpadSubtract,

    AbntC1,
    AbntC2,
    Apostrophe,
    Apps,
    Asterisk,
    At,
    Ax,
    Backslash,
    Calculator,
    Capital,
    Colon,
    Comma,
    Convert,
    Equals,
    Grave,
    Kana,
    Kanji,
    LeftAlt,
    LeftBracket,
    LeftControl,
    LeftShift,
    // The "Windows" key
    LeftSuper,
    Mail,
    MediaSelect,
    MediaStop,
    Minus,
    Mute,
    MyComputer,
    // also called "Next"
    NavigateForward,
    // also called "Prior"
    NavigateBackward,
    NextTrack,
    NoConvert,
    OEM102,
    Period,
    PlayPause,
    Plus,
    Power,
    PrevTrack,
    RightAlt,
    RightBracket,
    RightControl,
    RightShift,
    // The "Windows" key
    RightSuper,
    Semicolon,
    Slash,
    Sleep,
    Stop,
    Sysrq,
    Tab,
    Underline,
    Unlabeled,
    VolumeDown,
    VolumeUp,
    Wake,
    WebBack,
    WebFavorites,
    WebForward,
    WebHome,
    WebRefresh,
    WebSearch,
    WebStop,
    Yen,
    Copy,
    Paste,
    Cut,
}

fn convert_keycode(winit_keycode: &winit::event::VirtualKeyCode) -> KeyCode {
    use winit::event::VirtualKeyCode::*;
    match winit_keycode {
        Key1 => KeyCode::Key1,
        Key2 => KeyCode::Key2,
        Key3 => KeyCode::Key3,
        Key4 => KeyCode::Key4,
        Key5 => KeyCode::Key5,
        Key6 => KeyCode::Key6,
        Key7 => KeyCode::Key7,
        Key8 => KeyCode::Key8,
        Key9 => KeyCode::Key9,
        Key0 => KeyCode::Key0,
        A => KeyCode::A,
        B => KeyCode::B,
        C => KeyCode::C,
        D => KeyCode::D,
        E => KeyCode::E,
        F => KeyCode::F,
        G => KeyCode::G,
        H => KeyCode::H,
        I => KeyCode::I,
        J => KeyCode::J,
        K => KeyCode::K,
        L => KeyCode::L,
        M => KeyCode::M,
        N => KeyCode::N,
        O => KeyCode::O,
        P => KeyCode::P,
        Q => KeyCode::Q,
        R => KeyCode::R,
        S => KeyCode::S,
        T => KeyCode::T,
        U => KeyCode::U,
        V => KeyCode::V,
        W => KeyCode::W,
        X => KeyCode::X,
        Y => KeyCode::Y,
        Z => KeyCode::Z,
        Escape => KeyCode::Escape,
        F1 => KeyCode::F1,
        F2 => KeyCode::F2,
        F3 => KeyCode::F3,
        F4 => KeyCode::F4,
        F5 => KeyCode::F5,
        F6 => KeyCode::F6,
        F7 => KeyCode::F7,
        F8 => KeyCode::F8,
        F9 => KeyCode::F9,
        F10 => KeyCode::F10,
        F11 => KeyCode::F11,
        F12 => KeyCode::F12,
        F13 => KeyCode::F13,
        F14 => KeyCode::F14,
        F15 => KeyCode::F15,
        F16 => KeyCode::F16,
        F17 => KeyCode::F17,
        F18 => KeyCode::F18,
        F19 => KeyCode::F19,
        F20 => KeyCode::F20,
        F21 => KeyCode::F21,
        F22 => KeyCode::F22,
        F23 => KeyCode::F23,
        F24 => KeyCode::F24,
        Snapshot => KeyCode::PrintScreen,
        Scroll => KeyCode::ScrollLock,
        Pause => KeyCode::Pause,
        Insert => KeyCode::Insert,
        Home => KeyCode::Home,
        Delete => KeyCode::Delete,
        End => KeyCode::End,
        PageDown => KeyCode::PageDown,
        PageUp => KeyCode::PageUp,
        Left => KeyCode::LeftArrow,
        Up => KeyCode::UpArrow,
        Right => KeyCode::RightArrow,
        Down => KeyCode::DownArrow,
        Back => KeyCode::Backspace,
        Return => KeyCode::Return,
        Space => KeyCode::Space,
        Compose => KeyCode::Compose,
        Caret => KeyCode::Caret,
        Numlock => KeyCode::Numlock,
        Numpad0 => KeyCode::Numpad0,
        Numpad1 => KeyCode::Numpad1,
        Numpad2 => KeyCode::Numpad2,
        Numpad3 => KeyCode::Numpad3,
        Numpad4 => KeyCode::Numpad4,
        Numpad5 => KeyCode::Numpad5,
        Numpad6 => KeyCode::Numpad6,
        Numpad7 => KeyCode::Numpad7,
        Numpad8 => KeyCode::Numpad8,
        Numpad9 => KeyCode::Numpad9,
        NumpadAdd => KeyCode::NumpadAdd,
        NumpadDivide => KeyCode::NumpadDivide,
        NumpadDecimal => KeyCode::NumpadDecimal,
        NumpadComma => KeyCode::NumpadComma,
        NumpadEnter => KeyCode::NumpadEnter,
        NumpadEquals => KeyCode::NumpadEquals,
        NumpadMultiply => KeyCode::NumpadMultiply,
        NumpadSubtract => KeyCode::NumpadSubtract,
        AbntC1 => KeyCode::AbntC1,
        AbntC2 => KeyCode::AbntC2,
        Apostrophe => KeyCode::Apostrophe,
        Apps => KeyCode::Apps,
        Asterisk => KeyCode::Asterisk,
        At => KeyCode::At,
        Ax => KeyCode::Ax,
        Backslash => KeyCode::Backslash,
        Calculator => KeyCode::Calculator,
        Capital => KeyCode::Capital,
        Colon => KeyCode::Colon,
        Comma => KeyCode::Comma,
        Convert => KeyCode::Convert,
        Equals => KeyCode::Equals,
        Grave => KeyCode::Grave,
        Kana => KeyCode::Kana,
        Kanji => KeyCode::Kanji,
        LAlt => KeyCode::LeftAlt,
        LBracket => KeyCode::LeftBracket,
        LControl => KeyCode::LeftControl,
        LShift => KeyCode::LeftShift,
        LWin => KeyCode::LeftSuper,
        Mail => KeyCode::Mail,
        MediaSelect => KeyCode::MediaSelect,
        MediaStop => KeyCode::MediaStop,
        Minus => KeyCode::Minus,
        Mute => KeyCode::Mute,
        MyComputer => KeyCode::MyComputer,
        NavigateForward => KeyCode::NavigateForward,
        NavigateBackward => KeyCode::NavigateBackward,
        NextTrack => KeyCode::NextTrack,
        NoConvert => KeyCode::NoConvert,
        OEM102 => KeyCode::OEM102,
        Period => KeyCode::Period,
        PlayPause => KeyCode::PlayPause,
        Plus => KeyCode::Plus,
        Power => KeyCode::Power,
        PrevTrack => KeyCode::PrevTrack,
        RAlt => KeyCode::RightAlt,
        RBracket => KeyCode::RightBracket,
        RControl => KeyCode::RightControl,
        RShift => KeyCode::RightShift,
        RWin => KeyCode::RightSuper,
        Semicolon => KeyCode::Semicolon,
        Slash => KeyCode::Slash,
        Sleep => KeyCode::Sleep,
        Stop => KeyCode::Stop,
        Sysrq => KeyCode::Sysrq,
        Tab => KeyCode::Tab,
        Underline => KeyCode::Underline,
        Unlabeled => KeyCode::Unlabeled,
        VolumeDown => KeyCode::VolumeDown,
        VolumeUp => KeyCode::VolumeUp,
        Wake => KeyCode::Wake,
        WebBack => KeyCode::WebBack,
        WebFavorites => KeyCode::WebFavorites,
        WebForward => KeyCode::WebForward,
        WebHome => KeyCode::WebHome,
        WebRefresh => KeyCode::WebRefresh,
        WebSearch => KeyCode::WebSearch,
        WebStop => KeyCode::WebStop,
        Yen => KeyCode::Yen,
        Copy => KeyCode::Copy,
        Paste => KeyCode::Paste,
        Cut => KeyCode::Cut,
    }
}

#[derive(Debug, Hash, PartialEq, Eq, Clone, Copy)]
pub enum MouseButton {
    Left,
    Right,
    Middle,
    Extra1,
    Extra2,
    Extra3,
    Extra4,
}

fn convert_mousebutton(winit_button: &winit::event::MouseButton) -> MouseButton {
    use winit::event::MouseButton::*;
    match winit_button {
        Left => MouseButton::Left,
        Right => MouseButton::Right,
        Middle => MouseButton::Middle,
        Other(0) => MouseButton::Extra1,
        Other(1) => MouseButton::Extra2,
        Other(2) => MouseButton::Extra3,
        Other(_) => MouseButton::Extra4,
    }
}

#[derive(Debug, Hash, PartialEq, Eq, Clone, Copy)]
pub enum ButtonState {
    Pressed,
    Released,
}

fn convert_buttonstate(winit_state: &winit::event::ElementState) -> ButtonState {
    use winit::event::ElementState::*;
    match winit_state {
        Pressed => ButtonState::Pressed,
        Released => ButtonState::Released,
    }
}

#[derive(Debug, PartialEq)]
pub enum Event {
    WindowResize {
        size: Vector2U,
    },
    MouseInput {
        state: ButtonState,
        button: MouseButton,
    },
    MouseMoved {
        position: Vector2,
    },
    MouseScrolled {
        delta: Vector2,
    },
    KeyInput {
        state: ButtonState,
        code: KeyCode,
    },
    KeyTyped {
        key: char,
    },
    ApplicationUpdate,
    WindowClose,
}

pub(crate) fn convert_event(event: winit::event::Event<()>) -> Option<Event> {
    Some(match event {
        winit::event::Event::MainEventsCleared => Event::ApplicationUpdate,
        winit::event::Event::WindowEvent { ref event, .. } => match event {
            winit::event::WindowEvent::CloseRequested => Event::WindowClose,
            winit::event::WindowEvent::Resized(size) => Event::WindowResize {
                size: Vector2U::new(size.width, size.height),
            },
            winit::event::WindowEvent::ScaleFactorChanged { new_inner_size, .. } => {
                Event::WindowResize {
                    size: Vector2U::new(new_inner_size.width, new_inner_size.height),
                }
            }
            winit::event::WindowEvent::KeyboardInput {
                input:
                    winit::event::KeyboardInput {
                        state,
                        virtual_keycode: Some(keycode),
                        ..
                    },
                ..
            } => Event::KeyInput {
                state: convert_buttonstate(state),
                code: convert_keycode(keycode),
            },
            winit::event::WindowEvent::MouseInput { state, button, .. } => Event::MouseInput {
                state: convert_buttonstate(state),
                button: convert_mousebutton(button),
            },
            winit::event::WindowEvent::ReceivedCharacter(char) => Event::KeyTyped { key: *char },
            winit::event::WindowEvent::CursorMoved { position, .. } => Event::MouseMoved {
                position: Vector2::new(position.x as f32, position.y as f32),
            },
            winit::event::WindowEvent::MouseWheel { delta, .. } => match delta {
                winit::event::MouseScrollDelta::LineDelta(x, y) => Event::MouseScrolled {
                    delta: Vector2::new(*x, *y),
                },
                winit::event::MouseScrollDelta::PixelDelta(pos) => Event::MouseScrolled {
                    delta: Vector2::new(pos.x as f32, pos.y as f32),
                },
            },
            _ => None?,
        },
        _ => None?,
    })
}
